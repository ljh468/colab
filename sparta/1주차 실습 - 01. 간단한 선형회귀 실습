{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"1주차 실습 - 01. 간단한 선형회귀 실습","provenance":[{"file_id":"1FksWe-MrejLcc4e4psqBAK9io8m3UYKo","timestamp":1627636972070}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"X97SlAsRBrOe"},"source":["# 초간단 Linear Regression 실습 (TensorFlow)\n","\n","TensorFlow 공식 가이드 문서: https://www.tensorflow.org/guide\n","\n","Keras 공식 가이드 문서: https://www.tensorflow.org/guide/keras/sequential_model\n","\n","현재 TensorFlow 는 아래 방식으로 구현하는 것을 권장하고 있지 않습니다. 강의에서는 선형 회귀의 이해를 돕기위해 아래의 코드를 사용했지만 TensorFlow에서는 keras 사용하도록 권장하고 있고 우리 강의에서도 **최신 트렌드에 맞게 keras를 사용**할 예정입니다!"]},{"cell_type":"code","metadata":{"id":"FABQeusq6k05","executionInfo":{"status":"ok","timestamp":1628828537509,"user_tz":-540,"elapsed":2384,"user":{"displayName":"이재훈","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghn1YVfD2yXCylStMwpRhLWW5v0bbynr4TSqcOQQQ=s64","userId":"14270995088772057531"}}},"source":["import tensorflow as tf\n","\n","tf.compat.v1.disable_eager_execution()\n","\n","x_data = [[1, 1], [2, 2], [3, 3]]\n","y_data = [[10], [20], [30]]\n","\n","X = tf.compat.v1.placeholder(tf.float32, shape=[None, 2])\n","Y = tf.compat.v1.placeholder(tf.float32, shape=[None, 1])\n","\n","W = tf.Variable(tf.random.normal(shape=(2, 1)), name='W')\n","b = tf.Variable(tf.random.normal(shape=(1,)), name='b')"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"6CjakDv2CB4D","executionInfo":{"status":"ok","timestamp":1628828537516,"user_tz":-540,"elapsed":12,"user":{"displayName":"이재훈","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghn1YVfD2yXCylStMwpRhLWW5v0bbynr4TSqcOQQQ=s64","userId":"14270995088772057531"}}},"source":["hypothesis = tf.matmul(X, W) + b\n","cost = tf.reduce_mean(tf.square(hypothesis - Y))\n","optimizer = tf.compat.v1.train.GradientDescentOptimizer(learning_rate=0.01).minimize(cost)"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"blnlq78UFEiW","executionInfo":{"status":"ok","timestamp":1628828538437,"user_tz":-540,"elapsed":930,"user":{"displayName":"이재훈","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghn1YVfD2yXCylStMwpRhLWW5v0bbynr4TSqcOQQQ=s64","userId":"14270995088772057531"}},"outputId":"81965ff0-a2b5-42d5-faa3-b9760969df42"},"source":["with tf.compat.v1.Session() as sess:\n","  sess.run(tf.compat.v1.global_variables_initializer())\n","\n","  for step in range(50):\n","    c, W_, b_, _ = sess.run([cost, W, b, optimizer], feed_dict={X: x_data, Y: y_data})\n","    print('Step: %2d\\t loss: %.2f\\t' % (step, c))\n","\n","  print(sess.run(hypothesis, feed_dict={X: [[4, 4]]}))"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Step:  0\t loss: 811.10\t\n","Step:  1\t loss: 513.90\t\n","Step:  2\t loss: 325.62\t\n","Step:  3\t loss: 206.33\t\n","Step:  4\t loss: 130.76\t\n","Step:  5\t loss: 82.88\t\n","Step:  6\t loss: 52.55\t\n","Step:  7\t loss: 33.34\t\n","Step:  8\t loss: 21.16\t\n","Step:  9\t loss: 13.45\t\n","Step: 10\t loss: 8.56\t\n","Step: 11\t loss: 5.47\t\n","Step: 12\t loss: 3.50\t\n","Step: 13\t loss: 2.26\t\n","Step: 14\t loss: 1.47\t\n","Step: 15\t loss: 0.97\t\n","Step: 16\t loss: 0.66\t\n","Step: 17\t loss: 0.46\t\n","Step: 18\t loss: 0.33\t\n","Step: 19\t loss: 0.25\t\n","Step: 20\t loss: 0.20\t\n","Step: 21\t loss: 0.16\t\n","Step: 22\t loss: 0.14\t\n","Step: 23\t loss: 0.13\t\n","Step: 24\t loss: 0.12\t\n","Step: 25\t loss: 0.11\t\n","Step: 26\t loss: 0.11\t\n","Step: 27\t loss: 0.11\t\n","Step: 28\t loss: 0.11\t\n","Step: 29\t loss: 0.11\t\n","Step: 30\t loss: 0.10\t\n","Step: 31\t loss: 0.10\t\n","Step: 32\t loss: 0.10\t\n","Step: 33\t loss: 0.10\t\n","Step: 34\t loss: 0.10\t\n","Step: 35\t loss: 0.10\t\n","Step: 36\t loss: 0.10\t\n","Step: 37\t loss: 0.10\t\n","Step: 38\t loss: 0.10\t\n","Step: 39\t loss: 0.10\t\n","Step: 40\t loss: 0.10\t\n","Step: 41\t loss: 0.10\t\n","Step: 42\t loss: 0.10\t\n","Step: 43\t loss: 0.10\t\n","Step: 44\t loss: 0.10\t\n","Step: 45\t loss: 0.10\t\n","Step: 46\t loss: 0.09\t\n","Step: 47\t loss: 0.09\t\n","Step: 48\t loss: 0.09\t\n","Step: 49\t loss: 0.09\t\n","[[39.403954]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"knqMJmBJI-zd"},"source":["# 초초초간단 Linear Regression 실습 (Keras)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dvD_mxONFiCy","executionInfo":{"status":"ok","timestamp":1628828796551,"user_tz":-540,"elapsed":1219,"user":{"displayName":"이재훈","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghn1YVfD2yXCylStMwpRhLWW5v0bbynr4TSqcOQQQ=s64","userId":"14270995088772057531"}},"outputId":"20dd8d10-fd2b-4413-cb12-6d9f99147861"},"source":["import numpy as np\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.optimizers import Adam, SGD\n","\n","x_data = np.array([[1], [2], [3]])\n","y_data = np.array([[10], [20], [30]])\n","\n","model = Sequential([\n","  Dense(1)\n","])\n","\n","model.compile(loss='mean_squared_error', optimizer=SGD(lr=0.1))\n","\n","model.fit(x_data, y_data, epochs=100) # epochs 복수형으로 쓰기!"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Train on 3 samples\n","Epoch 1/100\n","3/3 [==============================] - 0s 20ms/sample - loss: 546.1481\n","Epoch 2/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 8.6690\n","Epoch 3/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 2.1468\n","Epoch 4/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.9719\n","Epoch 5/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.8773\n","Epoch 6/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.7881\n","Epoch 7/100\n","3/3 [==============================] - ETA: 0s - loss: 1.7032"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/optimizer_v2/optimizer_v2.py:375: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  \"The `lr` argument is deprecated, use `learning_rate` instead.\")\n"],"name":"stderr"},{"output_type":"stream","text":["3/3 [==============================] - 0s 2ms/sample - loss: 1.7032\n","Epoch 8/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 1.6223\n","Epoch 9/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 1.5452\n","Epoch 10/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 1.4718\n","Epoch 11/100\n","3/3 [==============================] - 0s 8ms/sample - loss: 1.4019\n","Epoch 12/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 1.3353\n","Epoch 13/100\n","3/3 [==============================] - 0s 4ms/sample - loss: 1.2719\n","Epoch 14/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 1.2115\n","Epoch 15/100\n","3/3 [==============================] - 0s 4ms/sample - loss: 1.1539\n","Epoch 16/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 1.0991\n","Epoch 17/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 1.0469\n","Epoch 18/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.9972\n","Epoch 19/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.9498\n","Epoch 20/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.9047\n","Epoch 21/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.8617\n","Epoch 22/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.8208\n","Epoch 23/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.7818\n","Epoch 24/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.7447\n","Epoch 25/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.7093\n","Epoch 26/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.6756\n","Epoch 27/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.6435\n","Epoch 28/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.6130\n","Epoch 29/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.5838\n","Epoch 30/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.5561\n","Epoch 31/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.5297\n","Epoch 32/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.5045\n","Epoch 33/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.4806\n","Epoch 34/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.4577\n","Epoch 35/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.4360\n","Epoch 36/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.4153\n","Epoch 37/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.3956\n","Epoch 38/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.3768\n","Epoch 39/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.3589\n","Epoch 40/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.3418\n","Epoch 41/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.3256\n","Epoch 42/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.3101\n","Epoch 43/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2954\n","Epoch 44/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2814\n","Epoch 45/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2680\n","Epoch 46/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2553\n","Epoch 47/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2431\n","Epoch 48/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2316\n","Epoch 49/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2206\n","Epoch 50/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 0.2101\n","Epoch 51/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.2001\n","Epoch 52/100\n","3/3 [==============================] - 0s 3ms/sample - loss: 0.1906\n","Epoch 53/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1816\n","Epoch 54/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1729\n","Epoch 55/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1647\n","Epoch 56/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1569\n","Epoch 57/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1495\n","Epoch 58/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1424\n","Epoch 59/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1356\n","Epoch 60/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1291\n","Epoch 61/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1230\n","Epoch 62/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1172\n","Epoch 63/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1116\n","Epoch 64/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1063\n","Epoch 65/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.1013\n","Epoch 66/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0964\n","Epoch 67/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0919\n","Epoch 68/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0875\n","Epoch 69/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 0.0833\n","Epoch 70/100\n","3/3 [==============================] - 0s 2ms/sample - loss: 0.0794\n","Epoch 71/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0756\n","Epoch 72/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0720\n","Epoch 73/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0686\n","Epoch 74/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0653\n","Epoch 75/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0622\n","Epoch 76/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0593\n","Epoch 77/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0565\n","Epoch 78/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0538\n","Epoch 79/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0512\n","Epoch 80/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0488\n","Epoch 81/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0465\n","Epoch 82/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0443\n","Epoch 83/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0422\n","Epoch 84/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0402\n","Epoch 85/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0383\n","Epoch 86/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0364\n","Epoch 87/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0347\n","Epoch 88/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0331\n","Epoch 89/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0315\n","Epoch 90/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0300\n","Epoch 91/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0286\n","Epoch 92/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0272\n","Epoch 93/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0259\n","Epoch 94/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0247\n","Epoch 95/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0235\n","Epoch 96/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0224\n","Epoch 97/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0213\n","Epoch 98/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0203\n","Epoch 99/100\n","3/3 [==============================] - 0s 1ms/sample - loss: 0.0194\n","Epoch 100/100\n","3/3 [==============================] - 0s 995us/sample - loss: 0.0184\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fc47a89fb90>"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"tfdDs3RITmpd"},"source":["## 테스트 데이터 예측하기"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ci3Hu3-eJse-","executionInfo":{"status":"ok","timestamp":1628828803360,"user_tz":-540,"elapsed":292,"user":{"displayName":"이재훈","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghn1YVfD2yXCylStMwpRhLWW5v0bbynr4TSqcOQQQ=s64","userId":"14270995088772057531"}},"outputId":"b8e34d5f-7890-4995-c4fb-8c0c50f53303"},"source":["y_pred = model.predict([[5]])\n","\n","print(y_pred)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["[[49.58032]]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:2426: UserWarning: `Model.state_updates` will be removed in a future version. This property should not be used in TensorFlow 2.0, as `updates` are applied automatically.\n","  warnings.warn('`Model.state_updates` will be removed in a future version. '\n"],"name":"stderr"}]}]}