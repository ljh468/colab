{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"3주차 실습 - 01. 딥러닝 XOR","provenance":[{"file_id":"1z8gLF2xwZHgSItojlIV6NE_qGkeAPG9N","timestamp":1629421764396}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"cGl7tV6zYlP2"},"source":["import numpy as np\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.optimizers import Adam, SGD"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IOZ3kGcNY8hP"},"source":["# XOR 데이터셋\n","\n","![](https://i.imgur.com/llFchxI.png)"]},{"cell_type":"code","metadata":{"id":"WiXA_GyPY8Ea"},"source":["x_data = np.array([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=np.float32)\n","y_data = np.array([[0], [1], [1], [0]], dtype=np.float32)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lLPGg54nYs86"},"source":["# XOR 이진 논리 회귀"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oqpq8Z9UW5z7","executionInfo":{"status":"ok","timestamp":1629421931360,"user_tz":-540,"elapsed":5846,"user":{"displayName":"[21_HF173]이재훈","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghn1YVfD2yXCylStMwpRhLWW5v0bbynr4TSqcOQQQ=s64","userId":"14270995088772057531"}},"outputId":"abf6adec-6435-4ae0-a633-911685da2aff"},"source":["model = Sequential([\n","  Dense(1, activation='sigmoid')\n","])\n","\n","model.compile(loss='binary_crossentropy', optimizer=SGD(learning_rate=0.1))\n","\n","model.fit(x_data, y_data, epochs=1000, verbose=0)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f83801fe610>"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"atwdM_sYXhJS","executionInfo":{"status":"ok","timestamp":1629421940558,"user_tz":-540,"elapsed":433,"user":{"displayName":"[21_HF173]이재훈","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghn1YVfD2yXCylStMwpRhLWW5v0bbynr4TSqcOQQQ=s64","userId":"14270995088772057531"}},"outputId":"c0662d94-21d9-442f-8764-6b8f7f556150"},"source":["y_pred = model.predict(x_data)\n","\n","print(y_pred)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.5009281 ]\n"," [0.50000864]\n"," [0.5002827 ]\n"," [0.49936315]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cI6To7CYYwcV"},"source":["# XOR 딥러닝(MLP)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m7K9HNdkXuQS","executionInfo":{"status":"ok","timestamp":1629425691403,"user_tz":-540,"elapsed":6048,"user":{"displayName":"[21_HF173]이재훈","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghn1YVfD2yXCylStMwpRhLWW5v0bbynr4TSqcOQQQ=s64","userId":"14270995088772057531"}},"outputId":"dc761380-3a15-47d6-e59d-d37cd5775ac4"},"source":["model = Sequential([\n","  Dense(8, activation='relu'),\n","  Dense(1, activation='sigmoid')\n","])\n","\n","model.compile(loss='binary_crossentropy', optimizer=SGD(learning_rate=0.1))\n","\n","model.fit(x_data, y_data, epochs=1000, verbose=0)\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense_20 (Dense)             (None, 8)                 24        \n","_________________________________________________________________\n","dense_21 (Dense)             (None, 1)                 9         \n","=================================================================\n","Total params: 33\n","Trainable params: 33\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1exYIaf2X3Vm","executionInfo":{"status":"ok","timestamp":1629421959260,"user_tz":-540,"elapsed":16,"user":{"displayName":"[21_HF173]이재훈","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghn1YVfD2yXCylStMwpRhLWW5v0bbynr4TSqcOQQQ=s64","userId":"14270995088772057531"}},"outputId":"97d7cb45-c137-413f-f086-5758fd1d7baa"},"source":["y_pred = model.predict(x_data)\n","\n","print(y_pred)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.03583074]\n"," [0.9863919 ]\n"," [0.98057395]\n"," [0.01116417]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nDHt2P5DaIMF"},"source":["# Keras Functional API\n","\n","우리는 지금까지 Keras의 Sequential 클래스를 사용하여 Sequential API를 사용했습니다. Sequential API는 순차적인 모델 설계에는 편리한 API 이지만, 복잡한 네트워크를 설계하기에는 한계가 있기 때문에 실무에서는 Functional API를 주로 사용합니다.\n","\n","위에서 했던 XOR 딥러닝 문제를 Functional API로 다시 작성해보겠습니다!"]},{"cell_type":"code","metadata":{"id":"esLNf0O9aoG0"},"source":["import numpy as np\n","from tensorflow.keras.models import Sequential, Model\n","from tensorflow.keras.layers import Dense, Input\n","from tensorflow.keras.optimizers import Adam, SGD"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d_EJ7WpAUKYX"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"B5vfGC5EbYUF"},"source":["`model.summary()` 를 사용하여 모델의 구조를 확인할 수 있습니다.\n","\n","Sequential API를 사용하면 구조를 확인하기 힘들지만 Functional API를 사용하면 `model.summary()`를 사용하여 구조를 확인하기 쉽다는 장점도 있습니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HunEvs9faHfD","executionInfo":{"status":"ok","timestamp":1629425450092,"user_tz":-540,"elapsed":6,"user":{"displayName":"[21_HF173]이재훈","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghn1YVfD2yXCylStMwpRhLWW5v0bbynr4TSqcOQQQ=s64","userId":"14270995088772057531"}},"outputId":"0a32f8b5-7682-486b-8ac2-9168899c0f83"},"source":["input = Input(shape=(2,))\n","hidden = Dense(8, activation='relu')(input)\n","hidden = Dense(8, activation='relu')(hidden)\n","output = Dense(1, activation='sigmoid')(hidden)\n","\n","model = Model(inputs=input, outputs=output)\n","\n","model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.1))\n","\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_4 (InputLayer)         [(None, 2)]               0         \n","_________________________________________________________________\n","dense_17 (Dense)             (None, 8)                 24        \n","_________________________________________________________________\n","dense_18 (Dense)             (None, 8)                 72        \n","_________________________________________________________________\n","dense_19 (Dense)             (None, 1)                 9         \n","=================================================================\n","Total params: 105\n","Trainable params: 105\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/optimizer_v2.py:356: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  \"The `lr` argument is deprecated, use `learning_rate` instead.\")\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p-a-DOJDX6tH","executionInfo":{"status":"ok","timestamp":1613527254008,"user_tz":-540,"elapsed":2155,"user":{"displayName":"Taehee Lee","photoUrl":"https://lh4.googleusercontent.com/--RT95Is--q8/AAAAAAAAAAI/AAAAAAAA7MQ/UAH2fPkrhmo/s64/photo.jpg","userId":"12017922817927484990"}},"outputId":"b43a4a39-07e8-4117-aa46-dd2b095c785d"},"source":["model.fit(x_data, y_data, epochs=1000, verbose=0)\n","\n","y_pred = model.predict(x_data)\n","\n","print(y_pred)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[0.02292162]\n"," [0.989807  ]\n"," [0.98963356]\n"," [0.00882056]]\n"],"name":"stdout"}]}]}